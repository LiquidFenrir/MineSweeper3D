; Example PICA200 vertex shader

; Uniforms
.fvec projection[4], modelView[4], cameraPos

; Constants
.constf myconst(0.0, 1.0, 30.0, 0.5)
.constf ssinfo(3.0, -2.0, -240.0, 0.000442477)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww

; .alias distfromcam r8
.alias fall myconst.zzzz
.alias ssA ssinfo.xxxx
.alias ssB ssinfo.yyyy
.alias sssubtr ssinfo.zzzz
.alias ssunder ssinfo.wwww

; Outputs
.out outpos position
.out outclr color
.out outtc0 texcoord0
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.in inpos v0
.in intex v1
.in innrm v2

.entry vmain
.proc vmain
	; Force the w component of inpos to be 1.0
	add r0.xz, cameraPos.xz, inpos.xz
	add r0.xz, -cameraPos.wy,  r0.xz
	mov r0.y,  inpos.y
	mov r0.w,  ones

	; distfromcam = cameraSize [h/2 : w/2] + inpos [-w/2, w/2][-h/2, h/2] = inpos [0, w][0, h]
	; add distfromcam.xz,	-cameraPos.wy, inpos.xz
	; distfromcam = inpos [0, w][0, h] - cameraPos [0, w][0, h] = relativePos
	; add distfromcam.xz, cameraPos.xz, distfromcam.xz
	call smoothstep

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outview = -r1
	mov outview, -r1

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; Transform the normal vector with the modelView matrix
	; TODO: use a separate normal matrix that is the transpose of the inverse of modelView
	dp3 r14.x, modelView[0], innrm
	dp3 r14.y, modelView[1], innrm
	dp3 r14.z, modelView[2], innrm
	dp3 r6.x, r14, r14
	rsq r6.x, r6.x
	mul r14.xyz, r14.xyz, r6.x

	mov r0, myconst.yxxx
	add r4, ones, r14.z
	mul r4, half, r4
	cmp zeros, ge, ge, r4.x
	rsq r4, r4.x
	mul r5, half, r14
	jmpc cmp.x, degenerate

	rcp r0.z, r4.x
	mul r0.xy, r5, r4

degenerate:
	mov outnq, r0

	; outtex = intex
	mov outtc0, intex

	mov outclr, ones

	; We're finished
	end
.end

; many thanks to https://www.youtube.com/watch?v=60VoL-F-jIQ
; use:
; - distfromcam
; - r0.y as the output
; - r8, r9 as scratch
.proc smoothstep
	mul r9.x, r0.x, r0.x
	mul r8.x, r0.z, r0.z
	add r9.xxxx, r9.x, r8.x
	; r9 = raw magnitude of r0

	; r9 = (r9 - t1)
	add r9, sssubtr, r9
	; r9 = r9/(t2 - t1)
	mul r9, ssunder, r9

	; r8 = max(0, min(1, r9))
	min r8, ones, r9
	max r8, zeros, r8

	; r9 = (3 - (2 * k))
	mul r9, ssB, r8
	add r9, ssA, r9

	; r8 = (k * k)
	mul r8, r8, r8

	; r8 = (k * k) * (3 - (2 * k)) = r8 * r9
	mul r8, r8, r9

	mul r8, -fall, r8

	add r0.y, r8.x, r0.y
.end
